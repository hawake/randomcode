package testimportrubrica;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FilenameFilter;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import testimportrubrica.io.DataBank;

/**
 *
 * @author hawake
 */
public class mainFrame extends javax.swing.JFrame {

    /** Creates new form mainFrame */
    public mainFrame() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        txtNomeFile = new javax.swing.JTextField();
        btnLoad = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtContenuto = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        lstListaFile = new javax.swing.JList();
        btnUpdate = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();

        fileChooser.setDialogTitle("Choose a VCF file to analyse...");
        fileChooser.setFileFilter(new MyCustomFilter()
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("VCF adrees book files Importer by hawake");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        txtNomeFile.setText("Select a file or \"Update\" the list --->");

        btnLoad.setText("Load");
        btnLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadActionPerformed(evt);
            }
        });

        txtContenuto.setColumns(20);
        txtContenuto.setRows(5);
        jScrollPane1.setViewportView(txtContenuto);

        lstListaFile.setModel(dlm);
        lstListaFile.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lstListaFileMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(lstListaFile);

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtNomeFile, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnLoad, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnUpdate)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnClear))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 258, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 394, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNomeFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnLoad, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnUpdate)
                            .addComponent(btnClear)))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 222, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadActionPerformed
        try {
            // Carica i dati dal file di rubrica Symbian
            
            /*String nomefile = txtNomeFile.getText() ;
            int [] righe = { 3 , 4 , 5 , 6 , 7 } ;
            contenuto = db.readFile(nomefile, righe) ;
            for ( int i = 0 ; i < righe.length ; i++ ) {
                 txtContenuto.append("\n\r" + contenuto[i] ) ;
            }*/
            
            int returnValue = fileChooser.showOpenDialog(this);
            
            if (returnValue == JFileChooser.APPROVE_OPTION) {
                File file = fileChooser.getSelectedFile();
                
                // Copy the file name to the text box . . .
                txtNomeFile.setText( file.getAbsolutePath() );
                // . . . and load it in the text area . . .
                lavora( file.getAbsolutePath() ) ;
                
            } else {
                System.out.println("File access cancelled by user.");
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(mainFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(mainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
       
    }//GEN-LAST:event_btnLoadActionPerformed

    private void lstListaFileMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lstListaFileMouseClicked
        try {
            lavora( lstListaFile.getSelectedValue().toString() ) ;
        } catch (IOException ex ) {
            JOptionPane.showMessageDialog( 
                    null,
                    "Error: an I/O exception has been caught!\nDetails:\n" + ex.getMessage()
                    );
        }
        //txtContenuto.append( "\n\r" + lstListaFile.getSelectedValue().toString() ) ;
    }//GEN-LAST:event_lstListaFileMouseClicked

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // btnUpdate scans the directory where is located the executable
        // looking for VCF files...
        File cartella = new File( System.getProperty( "user.dir" ) ) ;
        if ( !cartella.exists() )
            JOptionPane.showMessageDialog( 
                    null,
                    "Error: an I/O exception has been caught!\n"
                    );
        String a[] = cartella.list(); // Creo un array di stringhe per raccogliere
                                      // i nomi dei file contenuti nella cartella
        if ( a == null ) {
            JOptionPane.showMessageDialog( 
                    null,
                    "Error: directory empty!\n"
                    );
        } else {
            FilenameFilter filter = new FilenameFilter() {
                @Override
                public boolean accept(File dir, String nome) {
                    return nome.endsWith("vcf");
                }
            };
            
            a = cartella.list(filter); 
            
            dlm.clear() ;
            
            for ( int i = 0 ; i < a.length ; i++ ) {
                dlm.addElement( a[i] ) ;
            }
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        txtContenuto.setText( "" ) ;
    }//GEN-LAST:event_btnClearActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened

    }//GEN-LAST:event_formWindowOpened

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        
    }//GEN-LAST:event_formWindowActivated

    /**
     * @param args the command line arguments
     */
    /*
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(mainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(mainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(mainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(mainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form 
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                new mainFrame().setVisible(true);
            }
       });
    }*/
    
    class MyCustomFilter extends javax.swing.filechooser.FileFilter {
        @Override
        public boolean accept(File file) {
            // Allow only directories, or files with ".vcf" extension
            // (Symbian address book files i think...) . . .
            return file.isDirectory() || file.getAbsolutePath().endsWith(".vcf");
        }
        @Override
        public String getDescription() {
            // Extension description . . .
            return "VCF file (*.vcf)";
        }
    }
    
    protected void lavora( String tf ) throws FileNotFoundException, IOException {
        File miofile = new File( tf ) ;
        FileReader fileReader = new FileReader( miofile ) ;
        BufferedReader in1 = new BufferedReader( fileReader ) ;
        
        File cartella = new File( System.getProperty( "user.dir" ) ) ;
        if ( !cartella.exists() )
            JOptionPane.showMessageDialog( 
                    null,
                    "Error: an I/O exception has been caught!\n"
                    );
        String a[] = cartella.list(); // Creo un array di stringhe per raccogliere
                                      // i nomi dei file contenuti nella cartella
        dlm.clear() ;
        
        if ( a == null ) {
            JOptionPane.showMessageDialog( 
                    null,
                    "Error: directory empty!\n"
                    );
        } else {
            FilenameFilter filter = new FilenameFilter() {
                @Override
                public boolean accept(File dir, String nome) {
                    return nome.endsWith("vcf");
                }
            };
            
            a = cartella.list(filter); 
            
            for ( int i = 0 ; i < a.length ; i++ ) {
                dlm.addElement( a[i] ) ;
            }
        }

        txtContenuto.append("\n\r\n\r") ;
        String s ;
        
        numero_righe = 0 ;
        
        while ( ( s = in1.readLine() ) != null ) {
            txtContenuto.append("\n\r " + numero_righe + " " + s) ;
            numero_righe++ ;
        }
    }
    
    DefaultListModel dlm = new DefaultListModel() ;
    int numero_righe ;
    String [] contenuto ;
    DataBank db = new DataBank() ;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnLoad;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JList lstListaFile;
    private javax.swing.JTextArea txtContenuto;
    private javax.swing.JTextField txtNomeFile;
    // End of variables declaration//GEN-END:variables
}
